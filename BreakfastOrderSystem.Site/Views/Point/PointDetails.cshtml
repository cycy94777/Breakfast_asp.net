@model IEnumerable<BreakfastOrderSystem.Site.Models.ViewModels.PointDetailVm>

@{
    ViewBag.Title = "PointDetails";
}

<h2 class="fw-bold mt-2 mb-2">點數明細</h2>

<div class="row mb-3" style="margin-bottom: 10px;">
    <div class="col-12">
        <div class="d-flex justify-content-end" style="margin-bottom:7px;">
            <div class="d-flex align-items-center">
                <div class="input-group me-2">
                    <span class="input-group-text" id="basic-addon1">
                        <i class="fa-solid fa-magnifying-glass"></i>
                    </span>
                    <input type="text" id="searchInput" class="form-control" placeholder="請輸入會員姓名" aria-label="Username" aria-describedby="basic-addon1">
                </div>
                <button class="btn btn-light" id="searchButton" type="button">搜尋</button>
            </div>
        </div>
    </div>
</div>

<table class="table table-striped">
    <thead>
        <tr>

            <th>會員名稱</th>
            <th>訂單Id</th>
            <th>原有點數</th>
            <th>使用點數</th>
            <th>獲得點數</th>
            <th>時間</th>
            <th>剩餘點數</th>

        </tr>
    </thead>



    @*@foreach (var item in Model)
        {
            <tr>

                <td>
                    @Html.DisplayFor(modelItem => item.recordName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.OrderId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Original)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Used)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Earned)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Date)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Remaining)
                </td>

            </tr>
        }*@
    <tbody id="pointDetailTableBody">
        <!-- 這裡將由 JavaScript 動態填充 -->
    </tbody>

</table>

@*分頁*@
<nav aria-label="Page navigation">
    <ul class="pagination" id="pagination">
        <!-- 分頁按鈕將由 JavaScript 動態填充 -->
    </ul>
</nav>


@section Scripts{
    <script>

        function formatDate(dateString) {
            // 檢查是否為 "/Date(...)/" 格式
            if (typeof dateString === 'string' && dateString.startsWith("/Date(") && dateString.endsWith(")/")) {
                // 提取毫秒數
                const milliseconds = parseInt(dateString.substring(6, dateString.length - 2), 10);
                const date = new Date(milliseconds);
                if (isNaN(date.getTime())) {
                    return 'Invalid Date';
                }
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                return `${year}/${month}/${day}`;
            }

            // 如果是其他格式
            const date = new Date(dateString);
            if (isNaN(date.getTime())) {
                return 'Invalid Date';
            }
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}/${month}/${day}`;
        }




        document.addEventListener("DOMContentLoaded", () => {
            const maxRows = 2; // 每頁顯示的最大行數
            let currentPage = 1; // 當前頁面

            // 將 Razor 模型數據序列化為 JavaScript 對象
            let originalData = @Html.Raw(Json.Encode(Model));
            let filteredData = originalData;

            const searchInput = document.getElementById("searchInput");
            const searchButton = document.getElementById("searchButton");

            searchButton.addEventListener("click", () => {
                const searchTerm = searchInput.value.trim().toLowerCase();

                if (searchTerm === "") {
                    // 如果搜尋框為空，顯示所有會員
                    filteredData = originalData;
                } else {
                    // 根據會員姓名篩選資料
                    filteredData = originalData.filter(record =>
                        record.MemberName.toLowerCase().includes(searchTerm)
                    );
                }

                // 重置當前頁
                currentPage = 1;

                // 重新渲染表格和分頁
                renderTable(currentPage);
            });

            function renderTable(page) {
                const totalPages = Math.ceil(filteredData.length / maxRows);
                const tbody = document.getElementById("pointDetailTableBody");
                tbody.innerHTML = ""; // 清空表格內容

                const start = (page - 1) * maxRows;
                const end = Math.min(start + maxRows, filteredData.length);

                for (let i = start; i < end; i++) {
                    const record = filteredData[i];
                    const row = document.createElement("tr");
                    console.log(formatDate(record.Remaining));
                    row.innerHTML = `
                        <td>${record.MemberName}</td>
                        <td>${record.OrderId}</td>
                        <td>${record.Original}</td>
                        <td>${record.Used}</td>
                        <td>${record.Earned}</td>
                        <td>${formatDate(record.Date)}</td>
                        <td>${record.Remaining}</td>
                        
                    `;

                    tbody.appendChild(row);
                }

                // 渲染分頁按鈕
                renderPagination(totalPages);
            }

            function renderPagination(totalPages) {
                const pagination = document.getElementById("pagination");
                pagination.innerHTML = ""; // 清空舊的分頁按鈕

                const prevPage = document.createElement("li");
                prevPage.classList.add("page-item");
                prevPage.innerHTML = `
                    <a class="page-link" href="#" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>`;

                prevPage.addEventListener("click", () => {
                    if (currentPage > 1) {
                        currentPage--;
                        renderTable(currentPage);
                    }
                });
                pagination.appendChild(prevPage);

                for (let i = 1; i <= totalPages; i++) {
                    const pageItem = document.createElement("li");
                    pageItem.classList.add("page-item");
                    if (i === currentPage) {
                        pageItem.classList.add("active");
                    }
                    pageItem.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                    pageItem.addEventListener("click", () => {
                        currentPage = i;
                        renderTable(currentPage);
                    });
                    pagination.appendChild(pageItem);
                }

                const nextPage = document.createElement("li");
                nextPage.classList.add("page-item");
                nextPage.innerHTML = `
                    <a class="page-link" href="#" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>`;
                nextPage.addEventListener("click", () => {
                    if (currentPage < totalPages) {
                        currentPage++;
                        renderTable(currentPage);
                    }
                });
                pagination.appendChild(nextPage);
            }

            // 初始化顯示首頁
            renderTable(currentPage);
        });



    </script>



}
